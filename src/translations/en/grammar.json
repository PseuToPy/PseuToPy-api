[
    {
        "category": "Variables",
        "rules": [
            {
                "rule": "Assign a value to a variable (symbolic way)",
                "samples": [
                    "my_var = 1",
                    "my_var1 = my_var2",
                    "my_var = \"Hello\"",
                    "my_tuple = (1, my_var, \"Hi\")",
                    "my_list = [1, my_var, \"Hi\"]",
                    "my_dict = {\"key1\": 1, 2: \"value\"}",
                    "my_set = {1, 2, 3}"
                ]
            },
            {
                "rule": "Assign a value to a variable (natural way)",
                "samples": [
                    "set my_var to 1",
                    "set my_var1 to my_var2",
                    "set my_var to \"Hello\"",
                    "set my_tuple to (1, my_var, \"Hi\")",
                    "set my_list to [1, my_var, \"Hi\"]",
                    "set my_dict to {\"key1\": 1, 2: \"value\"}",
                    "set my_set to {1, 2, 3}"
                ]
            }
        ]
    },
    {
        "category": "Arithmetic Operators",
        "rules": [
            {
                "rule": "Arithmetic operators (symbolic way)",
                "samples": [
                    "my_var = 1 + 2",
                    "my_var = 1 - 2",
                    "my_var = -4",
                    "my_var = 2 * 3",
                    "my_var = 2 / 3",
                    "my_var = 2 % 3",
                    "my_var = 2 ** 3",
                    "my_var = 2 // 3"
                ]
            },
            {
                "rule": "Arithmetic operators (natural way)",
                "samples": [
                    "set my_var to 1 plus 2",
                    "set my_var to 1 minus 2",
                    "set my_var to minus 4",
                    "set my_var to 2 times 3",
                    "set my_var to 2 divided by 3",
                    "set my_var to 2 modulo 3",
                    "set my_var to 2 to the power of 3"
                ]
            }
        ]
    },
    {
        "category": "Comparison operators",
        "rules": [
            {
                "rule": "Comparison operators (symbolic way)",
                "samples": [
                    "my_var = 2 <= 3",
                    "my_var = 2 < 3",
                    "my_var = 2 >= 3",
                    "my_var = 2 > 3",
                    "my_var = 2 == 3",
                    "my_Var = 2 != 3"
                ]
            },
            {
                "rule": "Comparison operators (natural way)",
                "samples": [
                    "set my_var to 2 is lower or equal to 3",
                    "set my_var to 2 is lower than 3",
                    "set my_var to 2 is greater or equal to 3",
                    "set my_var to 2 is greater than 3",
                    "set my_var to 2 is equal to 3",
                    "set my_var to 2 is different from 3",
                    "set my_var to 2 is not equal to 3"
                ]
            },
            {
                "rule": "Operator: is",
                "samples": [
                    "set my_var to a is b",
                    "set my_var to a is not b"
                ]
            },
            {
                "rule": "Operator: in",
                "samples": [
                    "set my_var to 3 in my_tuple",
                    "set my_var to 3 not in my_list"
                ]
            }
        ]
    },
    {
        "category": "Boolean Operators",
        "rules": [
            {
                "rule": "Boolean values",
                "samples": [
                    "set my_var to true",
                    "set my_var to True",
                    "set my_var to false",
                    "set my_var to False"
                ]
            },
            {
                "rule": "Boolean operators",
                "samples": [
                    "set my_var to true and false",
                    "set my_var to true or false",
                    "set my_var to not true"
                ]
            }
        ]
    },
    {
        "category": "Control Structures",
        "rules": [
            {
                "rule": "If statements (allows either \":\", \"then\", or \"then:\")",
                "samples": [
                    "if true or false:\r\tset my_var = \"Some random value\"", 
                    "if true then:\r\tset my_var = \"Some random value\"\r\telse then\r\tset my_var = \"Some other random value\""
                ]
            },
            {
                "rule": "For statements (allows either \":\", \"do\", or \"do:\")",
                "samples": [
                    "for i in range(0, 10, 1):\r\tset a to i",
                    "for i in (1, 2, 3, 5, 7) do:\r\tset a to i"
                ]
            },
            {
                "rule": "While statements (allows either \":\", \"do\", or \"do:\")",
                "samples": [
                    "while true do:\r\tset a to 1"
                ]
            }
        ]
    },
    {
        "category": "Functions",
        "rules": [
            {
                "rule": "Declare a function",
                "samples": [
                    "define function foo():\r\tset my_var to 1",
                    "define function foo(arg) to do:\r\tset my_var to arg",
                    "define function bar(arg1, arg2) to do\r\tset my_var1 to arg1\r\tset my_var2 to arg2",
                    "define function foo():\r\treturn true",
                    "define function bar(arg1, arg2):\r\tset my_var1 to arg1\r\tset my_var2 to arg2\r\treturn my_var1, my_var2"
                ]
            },
            {
                "rule": "Call a function (parentheses are optional)",
                "samples": [
                    "foo()",
                    "foo(a, b=true)",
                    "foo(1, b, c=None)"
                ]
            }
        ]
    }
]
