[
    {
        "category": "Variables",
        "rules": [
            {
                "rule": "Assigner une valeur à une variable (manière symbolique)",
                "samples": [
                    "my_var = 1",
                    "my_var1 = my_var2",
                    "my_var = \"Bonjour\"",
                    "my_tuple = (1, my_var, \"Bonjour\")",
                    "my_list = [1, my_var, \"Bonjour\"]",
                    "my_dict = {\"cle\": 1, 2: \"valeur\"}",
                    "my_set = {1, 2, 3}"
                ]
            },
            {
                "rule": "Assigner une valeur à une variable (manière naturelle)",
                "samples": [
                    "mettre my_var à 1",
                    "mettre my_var à my_var2",
                    "mettre my_var à \"Bonjour\"",
                    "mettre my_tuple à (1, my_var, \"Bonjour\")",
                    "mettre my_list à [1, my_var, \"Bonjour\"]",
                    "mettre my_dict à {\"cle\": 1, 2: \"valeur\"}",
                    "mettre my_set à {1, 2, 3}"
                ]
            }
        ]
    },
    {
        "category": "Opérateurs Arithmétiques",
        "rules": [
            {
                "rule": "Opérateurs Arithmétiques (manière symbolique)",
                "samples": [
                    "my_var = 1 + 2",
                    "my_var = 1 - 2",
                    "my_var = -4",
                    "my_var = 2 * 3",
                    "my_var = 2 / 3",
                    "my_var = 2 % 3",
                    "my_var = 2 ** 3",
                    "my_var = 2 // 3"
                ]
            },
            {
                "rule": "Opérateurs Arithmétiques (manière naturelle)",
                "samples": [
                    "mettre my_var à 1 plus 2",
                    "mettre my_var à 1 moins 2",
                    "mettre my_var à moins 4",
                    "mettre my_var à 2 fois 3",
                    "mettre my_var à 2 divisé par 3",
                    "mettre my_var à 2 modulo 3",
                    "mettre my_var à 2 puissance 3"
                ]
            }
        ]
    },
    {
        "category": "Opérateurs de comparaison",
        "rules": [
            {
                "rule": "Opérateurs de comparaison (manière symbolique)",
                "samples": [
                    "my_var = 2 <= 3",
                    "my_var = 2 < 3",
                    "my_var = 2 >= 3",
                    "my_var = 2 > 3",
                    "my_var = 2 == 3",
                    "my_var = 2 != 3"
                ]
            },
            {
                "rule": "Opérateurs de comparaison (manière naturelle)",
                "samples": [
                    "mettre my_var à 2 est inférieur ou égal à 3",
                    "mettre my_var à 2 est inférieur à 3",
                    "mettre my_var à 2 est supérieur ou égal à 3",
                    "mettre my_var à 2 est supérieur à 3",
                    "mettre my_var à 2 est égal à 3",
                    "mettre my_var à 2 est différent de 3",
                    "mettre my_var à 2 n'est pas égal à 3"
                ]
            },
            {
                "rule": "Opérateur avec is",
                "samples": [
                    "mettre my_var à a est b",
                    "mettre my_var à a n'est pas b"
                ]
            },
            {
                "rule": "Opérateur avec in",
                "samples": [
                    "mettre my_var à 3 dans my_tuple",
                    "mettre my_var à 3 pas dans my_list"
                ]
            }
        ]
    },
    {
        "category": "Opérateurs Booléens",
        "rules": [
            {
                "rule": "Valeurs Booléennes",
                "samples": [
                    "mettre my_var à vrai",
                    "mettre my_var à Vrai",
                    "mettre my_var à faux",
                    "mettre my_var à Faux"
                ]
            },
            {
                "rule": "Opérateurs Booléens",
                "samples": [
                    "mettre my_var à vrai et faux",
                    "mettre my_var à vrai ou faux",
                    "mettre my_var à non vrai"
                ]
            }
        ]
    },
    {
        "category": "Structures de contrôle",
        "rules": [
            {
                "rule": "Structure conditionnelle (syntaxe \":\", \"alors\", ou \"alors:\" autorisée)",
                "samples": [
                    "si vrai ou faux:\r\tmettre my_var à \"Une valeur quelconque\"",
                    "si vrai alors:\r\tmettre my_var à \"Une valeur quelconque\"\rsinon alors:\r\tmettre my_var à \"Une autre valeur quelconque\""
                ]
            },
            {
                "rule": "Boucle For (syntaxe \":\", \"faire\", ou \"faire:\" autorisée)",
                "samples": [
                    "pour i in range(0, 10, 1):\r\tmettre a à i",
                    "pour i in (1, 2, 3, 5, 7) faire:\r\tmettre a à i"
                ]
            },
            {
                "rule": "Boucle While (syntaxe \":\", \"faire\", ou \"faire:\" autorisée)",
                "samples": [
                    "tant que vrai faire:\r\tmettre a à 1"
                ]
            }
        ]
    },
    {
        "category": "Fonctions",
        "rules": [
            {
                "rule": "Déclarer une fonction",
                "samples": [
                    "définir la fonction foo():\r\tmettre my_var à 1",
                    "définir la fonction foo(arg):\r\tmettre my_var à arg1",
                    "définir la fonction bar(arg1, arg2) as parameters:\r\tmettre my_var1 à arg1\r\tmettre my_var2 à arg2",
                    "définir la fonction foo():\r\treturn vrai",
                    "définir la fonction bar(arg1, arg2):\r\tmettre my_var1 à arg1\r\tmettre my_var2 à arg2\r\treturn my_var1, my_var2"
                ]
            },
            {
                "rule": "Appeler une fonction",
                "samples": [
                    "foo()",
                    "foo(a, b=vrai)",
                    "foo(1, b, c=vide)"
                ]
            }
        ]
    }
]
